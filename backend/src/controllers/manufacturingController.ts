// ...existing code...
import { Request, Response } from 'express';
import { ManufacturingService } from '../services/manufacturingService';
import { asyncHandler } from '../middleware/errorHandler';

export class ManufacturingController {
  // Dashboard KPIs endpoint
  static getDashboardKPIs = asyncHandler(async (req: Request, res: Response) => {
    const kpis = await ManufacturingService.getDashboardKPIs();
    res.status(200).json({
      success: true,
      message: 'Dashboard KPIs loaded successfully',
      data: kpis
    });
  });
  // List auto-generated orders with filters (date, status, product)
  static getAutoGeneratedOrders = asyncHandler(async (req: Request, res: Response) => {
    const { date, status, productId, page = 1, limit = 10 } = req.query;
    const filters: any = {};
    if (date) {
      // date format: YYYY-MM-DD
      const start = new Date(`${date}T00:00:00.000Z`);
      const end = new Date(`${date}T23:59:59.999Z`);
      filters.createdDate = { gte: start, lte: end };
    }
    if (status) filters.status = status;
    if (productId) filters.productId = productId;
    const skip = (Number(page) - 1) * Number(limit);
    const [orders, total] = await Promise.all([
      ManufacturingService.getOrdersWithFilters(filters, skip, Number(limit)),
      ManufacturingService.countOrdersWithFilters(filters)
    ]);
    res.status(200).json({
      success: true,
      message: 'Auto-generated orders retrieved successfully',
      data: orders,
      pagination: {
        page: Number(page),
        limit: Number(limit),
        total,
        totalPages: Math.ceil(total / Number(limit))
      }
    });
  });

  // Change status of an order
  static changeOrderStatus = asyncHandler(async (req: Request, res: Response) => {
    const { id } = req.params;
    const { status } = req.body;
    const order = await ManufacturingService.updateOrder(id, { status });
    res.status(200).json({
      success: true,
      message: 'Order status updated successfully',
      data: order
    });
  });
  static createOrder = asyncHandler(async (req: Request, res: Response) => {
    const data = req.body;
    const order = await ManufacturingService.createOrder(data);

    res.status(201).json({
      success: true,
      message: 'Manufacturing order created successfully',
      data: order
    });
  });

  static getAllOrders = asyncHandler(async (req: Request, res: Response) => {
    const page = parseInt(req.query.page as string) || 1;
    const limit = parseInt(req.query.limit as string) || 10;
    const search = req.query.search as string;
    const status = req.query.status as string;

    const result = await ManufacturingService.getAllOrders(page, limit, search, status);

    res.status(200).json({
      success: true,
      message: 'Manufacturing orders retrieved successfully',
      data: result.orders,
      pagination: result.pagination
    });
  });

  static getOrderById = asyncHandler(async (req: Request, res: Response) => {
    const { id } = req.params;
    const order = await ManufacturingService.getOrderById(id);

    res.status(200).json({
      success: true,
      message: 'Manufacturing order retrieved successfully',
      data: order
    });
  });

  static updateOrder = asyncHandler(async (req: Request, res: Response) => {
    const { id } = req.params;
    const data = req.body;
    const order = await ManufacturingService.updateOrder(id, data);

    res.status(200).json({
      success: true,
      message: 'Manufacturing order updated successfully',
      data: order
    });
  });

  static deleteOrder = asyncHandler(async (req: Request, res: Response) => {
    const { id } = req.params;
    const result = await ManufacturingService.deleteOrder(id);

    res.status(200).json({
      success: true,
      message: result.message
    });
  });

  static getStats = asyncHandler(async (req: Request, res: Response) => {
    const stats = await ManufacturingService.getOrderStats();

    res.status(200).json({
      success: true,
      message: 'Manufacturing order statistics retrieved successfully',
      data: stats
    });
  });
}
